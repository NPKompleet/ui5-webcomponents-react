{"version":3,"file":"index-ff39cd0c.js","sources":["../../packages/main/src/enums/FormBackgroundDesign.ts","../../packages/main/src/components/FormGroup/FormGroupTitle.tsx","../../packages/main/src/components/Form/Form.jss.ts","../../packages/main/src/components/Form/FormContext.ts","../../packages/main/src/components/Form/index.tsx","../../packages/main/src/components/FormGroup/index.tsx","../../packages/main/src/components/FormItem/index.tsx"],"sourcesContent":["export enum FormBackgroundDesign {\n  /**\n   * A solid background color dependent on the theme.\n   */\n  Solid = 'Solid',\n  /**\n   * Transparent background.\n   */\n  Transparent = 'Transparent'\n}\n","import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React, { CSSProperties } from 'react';\nimport { createUseStyles } from 'react-jss';\n\ninterface FormGroupTitlePropTypes {\n  titleText: string;\n\n  style?: CSSProperties;\n}\n\nconst useStyles = createUseStyles(\n  {\n    title: {\n      gridColumn: '1 / span 12',\n      display: 'flex',\n      alignItems: 'center',\n      height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n      lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n      fontFamily: ThemingParameters.sapFontHeaderFamily,\n      color: ThemingParameters.sapGroup_TitleTextColor,\n      fontSize: ThemingParameters.sapFontHeader6Size,\n      fontWeight: 'bold',\n      margin: 0,\n      marginBlockStart: '1rem'\n    }\n  },\n  { name: 'FormGroupTitle' }\n);\nexport function FormGroupTitle({ titleText, style }: FormGroupTitlePropTypes) {\n  const classes = useStyles();\n  return (\n    <h6\n      className={classes.title}\n      title={titleText}\n      aria-label={titleText}\n      data-component-name=\"FormGroupTitle\"\n      style={style}\n    >\n      {titleText}\n    </h6>\n  );\n}\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\n\nconst styles = {\n  formContainer: {\n    containerType: 'inline-size'\n  },\n  form: {\n    display: 'grid',\n    alignItems: 'center',\n    rowGap: '0.25rem',\n    columnGap: '0.5rem',\n    gridTemplateColumns: `repeat(calc(12 * var(--ui5wcr_form_columns)), 1fr)`,\n    '--ui5wcr_form_label_text_align': 'end',\n    '--ui5wcr_form_content_span': 'calc(12 - var(--ui5wcr_form_label_span))',\n\n    '--ui5wcr_form_columns_s': 1,\n    '--ui5wcr_form_columns_m': 1,\n    '--ui5wcr_form_columns_l': 1,\n    '--ui5wcr_form_columns_xl': 2,\n    '--ui5wcr_form_label_span_s': 12,\n    '--ui5wcr_form_label_span_m': 2,\n    '--ui5wcr_form_label_span_l': 4,\n    '--ui5wcr_form_label_span_xl': 4,\n\n    '@container (max-width: 599px)': {\n      '--ui5wcr_form_label_span': 'var(--ui5wcr_form_label_span_s)',\n      '--ui5wcr_form_columns': 'var(--ui5wcr_form_columns_s)'\n    },\n    '@container (min-width: 600px) and (max-width: 1023px)': {\n      '--ui5wcr_form_label_span': 'var(--ui5wcr_form_label_span_m)',\n      '--ui5wcr_form_columns': 'var(--ui5wcr_form_columns_m)'\n    },\n    '@container (min-width: 1024px) and (max-width: 1439px)': {\n      '--ui5wcr_form_label_span': 'var(--ui5wcr_form_label_span_l)',\n      '--ui5wcr_form_columns': 'var(--ui5wcr_form_columns_l)'\n    },\n    '@container (min-width: 1440px)': {\n      '--ui5wcr_form_label_span': 'var(--ui5wcr_form_label_span_xl)',\n      '--ui5wcr_form_columns': 'var(--ui5wcr_form_columns_xl)'\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapGroup_ContentBackground\n  },\n  transparent: {\n    backgroundColor: 'transparent'\n  },\n  formTitle: {\n    borderBlockEnd: `1px solid ${ThemingParameters.sapGroup_TitleBorderColor}`,\n    marginBlockEnd: '1.75rem',\n    gridColumn: '1 / -1'\n  },\n  labelSpan12: {\n    '--ui5wcr_form_content_span': 12,\n    '--ui5wcr_form_label_text_align': 'start',\n    '--ui5wcr_form_label_span': 12,\n    rowGap: 0\n  }\n};\n\nexport { styles };\n","import { createContext, useContext } from 'react';\n\nexport const FormContext = createContext({ labelSpan: null });\n\nexport function useFormContext() {\n  return useContext(FormContext);\n}\n","'use client';\n\nimport { Device, useSyncRef } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, {\n  Children,\n  cloneElement,\n  CSSProperties,\n  ElementType,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormBackgroundDesign, TitleLevel } from '../../enums';\nimport { CommonProps } from '../../interfaces';\nimport { Title } from '../../webComponents';\nimport { FormGroupTitle } from '../FormGroup/FormGroupTitle';\nimport { styles } from './Form.jss';\nimport { FormContext } from './FormContext';\n\nexport interface FormPropTypes extends CommonProps {\n  /**\n   * Components that are placed into Form.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormGroup` or `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n  /**\n   * Specifies the background color of the Form content.\n   */\n  backgroundDesign?: FormBackgroundDesign;\n  /**\n   * Form title\n   */\n  titleText?: string;\n  /**\n   * Form columns for small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   */\n  columnsS?: number;\n  /**\n   * Form columns for medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note__: The number of columns for medium size must not be smaller than the number of columns for small size.\n   */\n  columnsM?: number;\n  /**\n   * Form columns for large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note:__ The number of columns for large size must not be smaller than the number of columns for medium size.\n   */\n  columnsL?: number;\n  /**\n   * Form columns for extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   *\n   * __Note:__ The number of columns for extra large size must not be smaller than the number of columns for large size.\n   */\n  columnsXL?: number;\n\n  /**\n   * Default span for labels in small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 12\n   */\n  labelSpanS?: number;\n  /**\n   * Default span for labels in medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   */\n  labelSpanM?: number;\n  /**\n   * Default span for labels in large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanL?: number;\n  /**\n   * Default span for labels in extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanXL?: number;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n}\n\nconst useStyles = createUseStyles(styles, { name: 'Form' });\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n * It is possible to change the alignment of all labels by setting the CSS `align-items` property, per default all labels are centered.\n */\nconst Form = forwardRef<HTMLFormElement, FormPropTypes>((props, ref) => {\n  const {\n    as = 'form',\n    backgroundDesign = FormBackgroundDesign.Transparent,\n    children,\n    columnsS = 1,\n    columnsM = 1,\n    columnsL = 1,\n    columnsXL = 2,\n    className,\n    labelSpanS = 12,\n    labelSpanM = 2,\n    labelSpanL = 4,\n    labelSpanXL = 4,\n    titleText,\n    style,\n    ...rest\n  } = props;\n\n  const columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n\n  const labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n\n  const [componentRef, formRef] = useSyncRef<HTMLFormElement>(ref);\n  // use the window range set as first best guess, if not available use Desktop\n  const [currentRange, setCurrentRange] = useState(Device.getCurrentRange()?.name ?? 'Desktop');\n  const lastRange = useRef(currentRange);\n\n  useEffect(() => {\n    const observer = new ResizeObserver(([form]) => {\n      const rangeInfo = Device.getCurrentRange(form.contentRect.width);\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [formRef]);\n\n  const classes = useStyles();\n\n  const currentNumberOfColumns = columnsMap.get(currentRange);\n  const currentLabelSpan = labelSpanMap.get(currentRange);\n\n  const formGroups = useMemo(() => {\n    if (currentNumberOfColumns === 1) {\n      return children;\n    }\n\n    const computedFormGroups = [];\n    const childrenArray = Children.toArray(children);\n    const rows = childrenArray.reduce((acc, val, idx) => {\n      const columnIndex = Math.floor(idx / currentNumberOfColumns);\n      acc[columnIndex] ??= [];\n      acc[columnIndex].push(val);\n      return acc;\n    }, []) as ReactElement[][];\n\n    const maxRowsPerRow: number[] = [];\n    rows.forEach((rowGroup: ReactElement[], rowIndex) => {\n      maxRowsPerRow[rowIndex] = Math.max(\n        ...rowGroup.map((row) => {\n          if ((row.type as any).displayName === 'FormItem') {\n            return 1;\n          }\n          return Children.count(row.props.children) + 1;\n        })\n      );\n    });\n\n    let totalRowCount = 2;\n\n    rows.forEach((formGroup: ReactElement[], rowIndex) => {\n      const rowsForThisRow = maxRowsPerRow.at(rowIndex);\n      formGroup.forEach((cell, columnIndex) => {\n        const titleStyles: CSSProperties = {\n          gridColumnStart: columnIndex * 12 + 1,\n          gridRowStart: totalRowCount\n        };\n\n        if (cell?.props?.titleText) {\n          computedFormGroups.push(\n            <FormGroupTitle\n              titleText={cell.props.titleText}\n              style={titleStyles}\n              key={`title-col-${columnIndex}-row-${totalRowCount}`}\n            />\n          );\n        }\n\n        for (let i = 0; i < rowsForThisRow; i++) {\n          let itemToRender;\n          if ((cell.type as any).displayName === 'FormGroup') {\n            itemToRender = Children.toArray(cell.props.children).at(i);\n          } else if ((cell.type as any).displayName === 'FormItem' && i === 0) {\n            // render a single FormItem only when index is 0\n            itemToRender = cell;\n          }\n\n          if (itemToRender) {\n            computedFormGroups.push(\n              cloneElement(itemToRender as ReactElement, {\n                key: `col-${columnIndex}-row-${totalRowCount + i}`,\n                columnIndex,\n                rowIndex: totalRowCount + i + 1\n              })\n            );\n          }\n        }\n      });\n      totalRowCount += rowsForThisRow;\n      if (rowsForThisRow === 1) {\n        totalRowCount += 1;\n      }\n    });\n\n    return computedFormGroups;\n  }, [children, currentNumberOfColumns]);\n\n  const formClassNames = clsx(classes.form, classes[backgroundDesign.toLowerCase()]);\n\n  const CustomTag = as as ElementType;\n  return (\n    <FormContext.Provider value={{ labelSpan: currentLabelSpan }}>\n      <CustomTag\n        className={clsx(classes.formContainer, className)}\n        suppressHydrationWarning={true}\n        ref={componentRef}\n        style={{\n          ...style,\n          '--ui5wcr_form_label_span_s': labelSpanS,\n          '--ui5wcr_form_label_span_m': labelSpanM,\n          '--ui5wcr_form_label_span_l': labelSpanL,\n          '--ui5wcr_form_label_span_xl': labelSpanXL,\n          '--ui5wcr_form_columns_s': columnsS,\n          '--ui5wcr_form_columns_m': columnsM,\n          '--ui5wcr_form_columns_l': columnsL,\n          '--ui5wcr_form_columns_xl': columnsXL\n        }}\n        {...rest}\n      >\n        <div className={formClassNames}>\n          {titleText && (\n            <Title level={TitleLevel.H3} className={classes.formTitle}>\n              {titleText}\n            </Title>\n          )}\n          {formGroups}\n        </div>\n      </CustomTag>\n    </FormContext.Provider>\n  );\n});\n\nForm.displayName = 'Form';\n\nexport { Form };\n","import React, { FC, ReactNode } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormGroupTitle } from './FormGroupTitle';\n\nexport interface FormGroupPropTypes {\n  /**\n   * Title of the FormGroup.\n   */\n  titleText: string;\n  /**\n   * Content of the FormGroup.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n}\n\nconst useStyles = createUseStyles(\n  {\n    spacer: { height: '1rem', gridColumn: 'span 12' }\n  },\n  { name: 'FormGroup' }\n);\n/**\n * The `FormGroup` encapsulates `FormItems` into groups.\n *\n * __Note:__ `FormGroup` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `titleText` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormGroup: FC<FormGroupPropTypes> = (props: FormGroupPropTypes) => {\n  const { titleText, children } = props;\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <FormGroupTitle titleText={titleText} />\n      {children}\n      <span className={classes.spacer} />\n    </>\n  );\n};\n\nFormGroup.displayName = 'FormGroup';\n\nexport { FormGroup };\n","'use client';\n\nimport { useIsomorphicId } from '@ui5/webcomponents-react-base';\nimport React, { cloneElement, CSSProperties, Fragment, isValidElement, ReactElement, ReactNode } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { WrappingType } from '../../enums';\nimport { flattenFragments } from '../../internal/utils';\nimport { Label, LabelPropTypes } from '../../webComponents/Label';\nimport { useFormContext } from '../Form/FormContext';\n\nexport interface FormItemPropTypes {\n  /**\n   * Label of the FormItem. Can be either a string or a `Label` component.\n   */\n  label?: string | ReactElement;\n  /**\n   * Content of the FormItem. Can be an arbitrary React Node.\n   */\n  children: ReactNode | ReactNode[];\n}\n\ninterface InternalProps extends FormItemPropTypes {\n  columnIndex?: number;\n  rowIndex?: number;\n}\n\nconst CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);\n\nconst useStyles = createUseStyles(\n  {\n    label: {\n      gridColumnEnd: 'span var(--ui5wcr_form_label_span)',\n      justifySelf: 'var(--ui5wcr_form_label_text_align)',\n      textAlign: 'var(--ui5wcr_form_label_text_align)',\n      '&[data-label-span=\"12\"]': {\n        justifySelf: 'start',\n        paddingBlockEnd: '0.25rem'\n      },\n      '&:has(+ $content + [data-component-name=\"FormGroupTitle\"])': {\n        paddingBlockEnd: '1rem'\n      },\n      '&:has(+ $content > [ui5-checkbox])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-radio-button])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-switch])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-range-slider])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-slider])': {\n        alignSelf: 'center'\n      }\n    },\n    content: {\n      display: 'flex',\n      gridColumnEnd: 'span var(--ui5wcr_form_content_span)',\n      '&[data-label-span=\"12\"]': {\n        gridColumnEnd: 'span 12',\n        paddingBlockEnd: '0.625rem'\n      },\n      '&:has(+ [data-component-name=\"FormGroupTitle\"])': {\n        paddingBlockEnd: '1rem'\n      }\n    }\n  },\n  { name: 'FormItem' }\n);\n\nfunction FormItemLabel({ label, style }: { label: ReactNode; style?: CSSProperties }) {\n  const classes = useStyles();\n  const { labelSpan } = useFormContext();\n\n  if (typeof label === 'string') {\n    return (\n      <Label className={classes.label} style={style} wrappingType={WrappingType.Normal} data-label-span={labelSpan}>\n        {label ? `${label}:` : ''}\n      </Label>\n    );\n  }\n\n  if (isValidElement(label)) {\n    const { showColon, wrappingType, className, style: labelStyle, children } = label.props;\n    return cloneElement<LabelPropTypes & { 'data-label-span'?: number }>(\n      label,\n      {\n        showColon: showColon ?? true,\n        wrappingType: wrappingType ?? WrappingType.Normal,\n        className: `${classes.label} ${className ?? ''}`,\n        style: {\n          ...style,\n          ...(labelStyle || {})\n        },\n        'data-label-span': labelSpan\n      },\n      children ?? ''\n    );\n  }\n\n  return null;\n}\n\nconst getContentForHtmlLabel = (label: ReactNode) => {\n  if (typeof label === 'string') {\n    return label;\n  } else if (isValidElement(label) && typeof label.props?.children === 'string') {\n    return label.props.children;\n  } else {\n    return '';\n  }\n};\n\n/**\n * A `FormItem` represents a row in a `Form`. A `FormItem` is a combination of one label and a component associated to this label.\n *\n * __Note__: The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormItem = (props: FormItemPropTypes) => {\n  // eslint-disable-next-line react/prop-types\n  const { label, children, columnIndex, rowIndex } = props as InternalProps;\n  const uniqueId = useIsomorphicId();\n\n  const classes = useStyles();\n  const { labelSpan } = useFormContext();\n\n  const gridColumnStart = (columnIndex ?? 0) * 12 + 1;\n\n  const contentGridColumnStart =\n    columnIndex != null ? (labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan ?? 0)) : undefined;\n\n  const calculatedGridRowStart = labelSpan === 12 ? (rowIndex ?? 0) + 1 : rowIndex ?? 0;\n\n  return (\n    <>\n      <FormItemLabel\n        label={label}\n        style={{\n          gridColumnStart,\n          gridRowStart: rowIndex ?? undefined,\n          // TODO remove this line as soon as Firefox enables :has by default. https://caniuse.com/css-has\n          alignSelf: CENTER_ALIGNED_CHILDREN.has((children as any)?.type?.displayName) ? 'center' : undefined\n        }}\n      />\n      <div\n        className={classes.content}\n        style={{\n          gridColumnStart: contentGridColumnStart,\n          gridRowStart: rowIndex != null ? calculatedGridRowStart : undefined\n        }}\n        data-label-span={labelSpan}\n      >\n        {flattenFragments(children).map((child, index) => {\n          // @ts-expect-error: type can't be string because of `isValidElement`\n          if (isValidElement(child) && child.type && child.type.$$typeof !== Symbol.for('react.portal')) {\n            const content = getContentForHtmlLabel(label);\n            const childId = child?.props?.id;\n            return (\n              <Fragment key={`${content}-${uniqueId}-${index}`}>\n                {/*@ts-expect-error: child is ReactElement*/}\n                {cloneElement(child, { id: childId ?? `${uniqueId}-${index}` })}\n                <label htmlFor={childId ?? `${uniqueId}-${index}`} style={{ display: 'none' }} aria-hidden={true}>\n                  {content}\n                </label>\n              </Fragment>\n            );\n          }\n          return undefined;\n        })}\n      </div>\n    </>\n  );\n};\n\nFormItem.displayName = 'FormItem';\n\nexport { FormItem };\n"],"names":["FormBackgroundDesign","useStyles","createUseStyles","CssSizeVariables","ThemingParameters","FormGroupTitle","titleText","style","classes","jsx","styles","FormContext","createContext","useFormContext","useContext","Form","forwardRef","props","ref","as","backgroundDesign","children","columnsS","columnsM","columnsL","columnsXL","className","labelSpanS","labelSpanM","labelSpanL","labelSpanXL","rest","columnsMap","labelSpanMap","componentRef","formRef","useSyncRef","currentRange","setCurrentRange","useState","Device.getCurrentRange","lastRange","useRef","useEffect","observer","form","rangeInfo","currentNumberOfColumns","currentLabelSpan","formGroups","useMemo","computedFormGroups","rows","Children","acc","val","idx","columnIndex","maxRowsPerRow","rowGroup","rowIndex","row","totalRowCount","formGroup","rowsForThisRow","cell","titleStyles","_a","i","itemToRender","cloneElement","formClassNames","clsx","CustomTag","jsxs","Title","TitleLevel","FormGroup","Fragment","CENTER_ALIGNED_CHILDREN","FormItemLabel","label","labelSpan","Label","WrappingType","isValidElement","showColon","wrappingType","labelStyle","getContentForHtmlLabel","FormItem","uniqueId","useIsomorphicId","gridColumnStart","contentGridColumnStart","calculatedGridRowStart","flattenFragments","child","index","content","childId","Fragment2"],"mappings":"mnBAAY,IAAAA,GAAAA,IAIVA,EAAA,MAAQ,QAIRA,EAAA,YAAc,cARJA,IAAAA,GAAA,CAAA,CAAA,ECUZ,MAAAC,GAAAC,EAAkB,CAChB,MAAA,CACS,WAAA,cACO,QAAA,OACH,WAAA,SACG,OAAAC,EAAA,2BACa,WAAAA,EAAA,2BACI,WAAAC,EAAA,oBACC,MAAAA,EAAA,wBACL,SAAAA,EAAA,mBACG,WAAA,OAChB,OAAA,EACJ,iBAAA,MACU,CACpB,EACF,CAAA,KAAA,gBAAA,CAEF,EACO,SAAAC,EAAA,CAAA,UAAAC,EAAA,MAAAC,GAAA,CACL,MAAAC,EAAAP,KACA,OAAAQ,EAAA,IACE,KAAC,CAAA,UAAAD,EAAA,MACoB,MAAAF,EACZ,aAAAA,EACK,sBAAA,iBACQ,MAAAC,EACpB,SAAAD,CAEC,CAAA,CAGP,6SCvCA,MAAMI,GAAS,CACb,cAAe,CACb,cAAe,aACjB,EACA,KAAM,CACJ,QAAS,OACT,WAAY,SACZ,OAAQ,UACR,UAAW,SACX,oBAAqB,qDACrB,iCAAkC,MAClC,6BAA8B,2CAE9B,0BAA2B,EAC3B,0BAA2B,EAC3B,0BAA2B,EAC3B,2BAA4B,EAC5B,6BAA8B,GAC9B,6BAA8B,EAC9B,6BAA8B,EAC9B,8BAA+B,EAE/B,gCAAiC,CAC/B,2BAA4B,kCAC5B,wBAAyB,8BAC3B,EACA,wDAAyD,CACvD,2BAA4B,kCAC5B,wBAAyB,8BAC3B,EACA,yDAA0D,CACxD,2BAA4B,kCAC5B,wBAAyB,8BAC3B,EACA,iCAAkC,CAChC,2BAA4B,mCAC5B,wBAAyB,+BAC3B,CACF,EACA,MAAO,CACL,gBAAiBN,EAAkB,0BACrC,EACA,YAAa,CACX,gBAAiB,aACnB,EACA,UAAW,CACT,eAAgB,aAAaA,EAAkB,4BAC/C,eAAgB,UAChB,WAAY,QACd,EACA,YAAa,CACX,6BAA8B,GAC9B,iCAAkC,QAClC,2BAA4B,GAC5B,OAAQ,CACV,CACF,ECxDaO,EAAcC,EAAAA,cAAc,CAAE,UAAW,IAAM,CAAA,EAErD,SAASC,GAAiB,CAC/B,OAAOC,EAAAA,WAAWH,CAAW,CAC/B,CCyGA,MAAAV,GAAAC,EAAAQ,GAAA,CAAA,KAAA,MAAA,CAAA,EAKAK,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,OACE,KAAA,CAAM,GAAAC,EAAA,OACC,iBAAAC,EAAApB,EAAA,YACmC,SAAAqB,EACxC,SAAAC,EAAA,EACW,SAAAC,EAAA,EACA,SAAAC,EAAA,EACA,UAAAC,EAAA,EACC,UAAAC,EACZ,WAAAC,EAAA,GACa,WAAAC,EAAA,EACA,WAAAC,EAAA,EACA,YAAAC,EAAA,EACC,UAAAxB,EACd,MAAAC,EACA,GAAAwB,CACG,EAAAd,EAGLe,EAAA,IAAA,IACAA,EAAA,IAAA,QAAAV,CAAA,EACAU,EAAA,IAAA,SAAAT,CAAA,EACAS,EAAA,IAAA,UAAAR,CAAA,EACAQ,EAAA,IAAA,eAAAP,CAAA,EAEA,MAAAQ,EAAA,IAAA,IACAA,EAAA,IAAA,QAAAN,CAAA,EACAM,EAAA,IAAA,SAAAL,CAAA,EACAK,EAAA,IAAA,UAAAJ,CAAA,EACAI,EAAA,IAAA,eAAAH,CAAA,EAEA,KAAA,CAAAI,GAAAC,CAAA,EAAAC,GAAAlB,CAAA,EAEA,CAAAmB,EAAAC,EAAA,EAAAC,EAAAA,WAAAC,EAAAA,MAAAA,YAAAA,EAAA,OAAA,SAAA,EACAC,EAAAC,SAAAL,CAAA,EAEAM,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,IAAA,eAAA,CAAA,CAAAC,CAAA,IAAA,CACE,MAAAC,EAAAN,EAAAK,EAAA,YAAA,KAAA,EACAC,GAAAL,EAAA,UAAAK,EAAA,OACEL,EAAA,QAAAK,EAAA,KACAR,GAAAQ,EAAA,IAAA,EACF,CAAA,EAGF,OAAAX,EAAA,SACES,EAAA,QAAAT,EAAA,OAAA,EAGF,IAAA,CACES,EAAA,WAAA,CAAoB,CACtB,EAAA,CAAAT,CAAA,CAAA,EAGF,MAAA3B,EAAAP,KAEA8C,EAAAf,EAAA,IAAAK,CAAA,EACAW,GAAAf,EAAA,IAAAI,CAAA,EAEAY,GAAAC,EAAAA,QAAA,IAAA,CACE,GAAAH,IAAA,EACE,OAAA1B,EAGF,MAAA8B,EAAA,CAAA,EAEAC,EADAC,EAAAA,SAAA,QAAAhC,CAAA,EACA,OAAA,CAAAiC,EAAAC,EAAAC,IAAA,CACE,MAAAC,EAAA,KAAA,MAAAD,EAAAT,CAAA,EACA,OAAAO,EAAAG,KAAAH,EAAAG,GAAA,IACAH,EAAAG,CAAA,EAAA,KAAAF,CAAA,EACAD,CAAO,EAAA,CAAA,CAAA,EAGTI,EAAA,CAAA,EACAN,EAAA,QAAA,CAAAO,EAAAC,IAAA,CACEF,EAAAE,CAAA,EAAA,KAAA,IAA+B,GAAAD,EAAA,IAAAE,GAE3BA,EAAA,KAAA,cAAA,WACE,EAEFR,EAAAA,SAAA,MAAAQ,EAAA,MAAA,QAAA,EAAA,CAA4C,CAC7C,CACH,CAAA,EAGF,IAAAC,EAAA,EAEA,OAAAV,EAAA,QAAA,CAAAW,EAAAH,IAAA,CACE,MAAAI,EAAAN,EAAA,GAAAE,CAAA,EACAG,EAAA,QAAA,CAAAE,EAAAR,IAAA,OACE,MAAAS,GAAA,CAAmC,gBAAAT,EAAA,GAAA,EACG,aAAAK,CACtB,GAGhBK,EAAAF,GAAA,YAAAA,EAAA,QAAA,MAAAE,EAAA,WACEhB,EAAA,KAAmB1C,EAAA,IACjBJ,EAAC,CAAA,UAAA4D,EAAA,MAAA,UACuB,MAAAC,EACf,EAAA,aAAAT,SAAAK,GAC8B,CACvC,EAIJ,QAAAM,EAAA,EAAAA,EAAAJ,EAAAI,IAAA,CACE,IAAAC,EACAJ,EAAA,KAAA,cAAA,YACEI,EAAAhB,EAAAA,SAAA,QAAAY,EAAA,MAAA,QAAA,EAAA,GAAAG,CAAA,EAAyDH,EAAA,KAAA,cAAA,YAAAG,IAAA,IAGzDC,EAAAJ,GAGFI,GACElB,EAAA,KAAmBmB,EAAAA,aAAAD,EAAA,CAC0B,IAAA,OAAAZ,SAAAK,EAAAM,IACM,YAAAX,EAC/C,SAAAK,EAAAM,EAAA,CAC8B,CAAA,CAC/B,EAGP,CAAA,EAEFN,GAAAE,EACAA,IAAA,IACEF,GAAA,EACF,CAAA,EAGFX,CAAO,EAAA,CAAA9B,EAAA0B,CAAA,CAAA,EAGTwB,GAAAC,EAAAhE,EAAA,KAAAA,EAAAY,EAAA,YAAA,CAAA,CAAA,EAEAqD,GAAAtD,EACA,OAAAV,EAAA,IAAAE,EAAA,SAAA,CAAA,MAAA,CAAA,UAAAqC,IAAA,SAAAvC,EAAA,IAEIgE,GAAC,CAAA,UAAAD,EAAAhE,EAAA,cAAAkB,CAAA,EACiD,yBAAA,GACtB,IAAAQ,GACrB,MAAA,CACE,GAAA3B,EACF,6BAAAoB,EAC2B,6BAAAC,EACA,6BAAAC,EACA,8BAAAC,EACC,0BAAAR,EACJ,0BAAAC,EACA,0BAAAC,EACA,2BAAAC,CACC,EAC9B,GAAAM,EACI,SAAA2C,EAAA,KAAA,MAAA,CAAA,UAAAH,GAAA,SAAA,CAGDjE,GAAAG,EAAA,IAAAkE,GAAA,CAAA,MAAAC,GAAA,GAAA,UAAApE,EAAA,UAAA,SAAAF,CAAA,CAAA,EAGC2C,EAED,EAAA,CACH,CAAA,CAAA,CAAA,CAIR,CAAA,EAEAlC,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;uIC5QA,MAAAd,GAAAC,EAAkB,CAChB,OAAA,CAAA,OAAA,OAAA,WAAA,SAAA,CACkD,EAClD,CAAA,KAAA,WAAA,CAEF,EAMA2E,EAAA5D,GAAA,CACE,KAAA,CAAA,UAAAX,EAAA,SAAAe,CAAA,EAAAJ,EAEAT,EAAAP,KAEA,OAAAyE,EAAA,KAAAI,WAAA,CAAA,SAAA,CAEIrE,MAAAJ,EAAA,CAAA,UAAAC,EAAA,EAAsCe,EACrCZ,EAAAA,IAAA,OAAA,CAAA,UAAAD,EAAA,MAAA,CAAA,CACgC,CAAA,CAAA,CAGvC,EAEAqE,EAAA,YAAA,2wBChBA,MAAAE,GAAA,IAAA,IAAA,CAAA,WAAA,cAAA,SAAA,cAAA,QAAA,CAAA,EAEA9E,EAAAC,EAAkB,CAChB,MAAA,CACS,cAAA,qCACU,YAAA,sCACF,UAAA,sCACF,0BAAA,CACgB,YAAA,QACZ,gBAAA,SACI,EACnB,6DAAA,CAC8D,gBAAA,MAC3C,EACnB,qCAAA,CACsC,UAAA,QACzB,EACb,yCAAA,CAC0C,UAAA,QAC7B,EACb,mCAAA,CACoC,UAAA,QACvB,EACb,yCAAA,CAC0C,UAAA,QAC7B,EACb,mCAAA,CACoC,UAAA,QACvB,CACb,EACF,QAAA,CACS,QAAA,OACE,cAAA,uCACM,0BAAA,CACY,cAAA,UACV,gBAAA,UACE,EACnB,kDAAA,CACmD,gBAAA,MAChC,CACnB,CACF,EACF,CAAA,KAAA,UAAA,CAEF,EAEA,SAAA8E,GAAA,CAAA,MAAAC,EAAA,MAAA1E,GAAA,CACE,MAAAC,EAAAP,IACA,CAAA,UAAAiF,GAAArE,IAEA,GAAA,OAAAoE,GAAA,SACE,OAAAxE,EAAA,IAAA0E,GAAA,CAAA,UAAA3E,EAAA,MAAA,MAAAD,EAAA,aAAA6E,EAAA,OAAA,kBAAAF,EAAA,SAAAD,EAAA,GAAAA,KAAA,EAAA,CAAA,EAOF,GAAAI,EAAAA,eAAAJ,CAAA,EAAA,CACE,KAAA,CAAA,UAAAK,EAAA,aAAAC,EAAA,UAAA7D,EAAA,MAAA8D,EAAA,SAAAnE,CAAA,EAAA4D,EAAA,MACA,OAAAX,EAAA,aAAOW,EACL,CACA,UAAAK,GAAA,GAC0B,aAAAC,GAAAH,EAAA,OACmB,UAAA,GAAA5E,EAAA,SAAAkB,GAAA,KACC,MAAA,CACrC,GAAAnB,EACF,GAAAiF,GAAA,CAAA,CACgB,EACrB,kBAAAN,CACmB,EACrB7D,GAAA,EACY,EAIhB,OAAA,IACF,CAEA,MAAAoE,GAAAR,GAAA,OACE,OAAA,OAAAA,GAAA,SACEA,EAAOI,EAAA,eAAAJ,CAAA,GAAA,QAAAd,EAAAc,EAAA,QAAA,YAAAd,EAAA,WAAA,SAEPc,EAAA,MAAA,SAEA,EAEJ,EAOAS,EAAAzE,GAAA,OAEE,KAAA,CAAA,MAAAgE,EAAA,SAAA5D,EAAA,YAAAoC,EAAA,SAAAG,CAAA,EAAA3C,EACA0E,EAAAC,KAEApF,EAAAP,IACA,CAAA,UAAAiF,GAAArE,IAEAgF,GAAApC,GAAA,GAAA,GAAA,EAEAqC,EAAArC,GAAA,KAAAyB,IAAA,GAAAW,EAAAA,GAAAX,GAAA,GAAA,OAGAa,EAAAb,IAAA,IAAAtB,GAAA,GAAA,EAAAA,GAAA,EAEA,OAAAc,EAAA,KAAAI,WAAA,CAAA,SAAA,CAEIrE,EAAA,IAAAuE,GAAC,CAAA,MAAAC,EACC,MAAA,CACO,gBAAAY,EACL,aAAAjC,GAAA,OAC0B,UAAAmB,GAAA,KAAAZ,EAAA9C,GAAA,YAAAA,EAAA,OAAA,YAAA8C,EAAA,WAAA,EAAA,SAAA,MAEgE,CAC5F,CAAA,EACF1D,EAAA,IACA,MAAC,CAAA,UAAAD,EAAA,QACoB,MAAA,CACZ,gBAAAsF,EACY,aAAAlC,GAAA,KAAAmC,EAAA,MACyC,EAC5D,kBAAAb,EACiB,SAAAc,GAAA3E,CAAA,EAAA,IAAA,CAAA4E,EAAAC,IAAA,OAIf,GAAAb,iBAAAY,CAAA,GAAAA,EAAA,MAAAA,EAAA,KAAA,WAAA,OAAA,IAAA,cAAA,EAAA,CACE,MAAAE,EAAAV,GAAAR,CAAA,EACAmB,GAAAjC,EAAA8B,GAAA,YAAAA,EAAA,QAAA,YAAA9B,EAAA,GACA,OAAAO,EAAA,KAAA2B,WAAA,CAAA,SAAA,CAGK/B,eAAA2B,EAAA,CAAA,GAAAG,GAAA,GAAAT,KAAAO,IAAA,EAA6DzF,EAAA,IAAA,QAAA,CAAA,QAAA2F,GAAA,GAAAT,KAAAO,IAAA,MAAA,CAAA,QAAA,MAAA,EAAA,cAAA,GAAA,SAAAC,EAAA,CAG9D,GAAA,GAAAA,KAAAR,KAAAO,GAAA,EAIC,CAAA,CACR,CAAA,CACH,CAAA,CAAA,CAGN,EAEAR,EAAA,YAAA"}
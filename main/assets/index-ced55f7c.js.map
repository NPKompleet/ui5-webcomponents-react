{"version":3,"file":"index-ced55f7c.js","sources":["../../packages/main/src/enums/ToolbarDesign.ts","../../packages/main/src/enums/ToolbarStyle.ts","../../packages/main/src/internal/OverflowPopoverContext.ts","../../packages/main/src/components/Toolbar/OverflowPopover.tsx","../../packages/main/src/components/Toolbar/Toolbar.jss.ts","../../packages/main/src/components/Toolbar/index.tsx"],"sourcesContent":["export enum ToolbarDesign {\n  Auto = 'Auto',\n  Info = 'Info',\n  Solid = 'Solid',\n  Transparent = 'Transparent'\n}\n","export enum ToolbarStyle {\n  Clear = 'Clear',\n  Standard = 'Standard'\n}\n","import { createContext } from 'react';\n\ninterface IOverflowPopoverContext {\n  inPopover: boolean;\n}\n\nexport const OverflowPopoverContext = createContext<IOverflowPopoverContext>({ inPopover: false });\n","import iconOverflow from '@ui5/webcomponents-icons/dist/overflow.js';\nimport { Device, useSyncRef } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, { cloneElement, FC, ReactElement, ReactNode, Ref, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ButtonDesign, PopoverPlacementType } from '../../enums';\nimport { OverflowPopoverContext } from '../../internal/OverflowPopoverContext';\nimport { useCanRenderPortal } from '../../internal/ssr';\nimport { stopPropagation } from '../../internal/stopPropagation';\nimport { getUi5TagWithSuffix } from '../../internal/utils';\nimport {\n  ButtonPropTypes,\n  Popover,\n  PopoverDomRef,\n  ToggleButton,\n  ToggleButtonDomRef,\n  ToggleButtonPropTypes\n} from '../../webComponents';\n\ninterface OverflowPopoverProps {\n  lastVisibleIndex: number;\n  classes: Record<string, string>;\n  children: ReactNode[];\n  portalContainer: Element;\n  overflowContentRef: Ref<HTMLDivElement>;\n  numberOfAlwaysVisibleItems?: number;\n  showMoreText: string;\n  overflowPopoverRef?: Ref<PopoverDomRef>;\n  overflowButton?: ReactElement<ToggleButtonPropTypes> | ReactElement<ButtonPropTypes>;\n}\n\nconst isPhone = Device.isPhone();\n\nexport const OverflowPopover: FC<OverflowPopoverProps> = (props: OverflowPopoverProps) => {\n  const {\n    lastVisibleIndex,\n    classes,\n    children,\n    portalContainer,\n    overflowContentRef,\n    numberOfAlwaysVisibleItems,\n    showMoreText,\n    overflowPopoverRef,\n    overflowButton\n  } = props;\n  const [pressed, setPressed] = useState(false);\n  const toggleBtnRef = useRef<ToggleButtonDomRef>(null);\n  const [componentRef, popoverRef] = useSyncRef(overflowPopoverRef);\n\n  const handleToggleButtonClick = (e) => {\n    e.stopPropagation();\n    setPressed((prev) => {\n      if (!prev) {\n        if (popoverRef.current) {\n          popoverRef.current.opener = e.target;\n        }\n        return true;\n      }\n      return false;\n    });\n  };\n\n  const handleBeforeOpen = () => {\n    if (toggleBtnRef.current) {\n      toggleBtnRef.current.accessibilityAttributes = { expanded: true, hasPopup: 'menu' };\n    }\n  };\n  const handleAfterOpen = () => {\n    setPressed(true);\n  };\n\n  const handleClose = (e) => {\n    if (toggleBtnRef.current) {\n      toggleBtnRef.current.accessibilityAttributes = { expanded: false, hasPopup: 'menu' };\n    }\n    stopPropagation(e);\n    setPressed(false);\n  };\n\n  useEffect(() => {\n    const tagName = getUi5TagWithSuffix('ui5-toggle-button');\n    customElements.whenDefined(tagName).then(() => {\n      if (toggleBtnRef.current) {\n        toggleBtnRef.current.accessibilityAttributes = { expanded: pressed, hasPopup: 'menu' };\n      }\n    });\n  }, []);\n\n  const clonedOverflowButtonClick = (e) => {\n    if (typeof overflowButton?.props?.onClick === 'function') {\n      overflowButton.props.onClick(e);\n    }\n    if (!e.defaultPrevented) {\n      handleToggleButtonClick(e);\n    }\n  };\n\n  const canRenderPortal = useCanRenderPortal();\n\n  return (\n    <OverflowPopoverContext.Provider value={{ inPopover: true }}>\n      {overflowButton ? (\n        cloneElement(overflowButton, { onClick: clonedOverflowButtonClick })\n      ) : (\n        <ToggleButton\n          ref={toggleBtnRef}\n          design={ButtonDesign.Transparent}\n          icon={iconOverflow}\n          onClick={handleToggleButtonClick}\n          pressed={pressed}\n          accessibleName={showMoreText}\n          tooltip={showMoreText}\n          data-component-name=\"ToolbarOverflowButton\"\n        />\n      )}\n      {canRenderPortal &&\n        createPortal(\n          <Popover\n            data-component-name=\"ToolbarOverflowPopover\"\n            className={clsx(classes.popover, isPhone && classes.popoverPhone)}\n            placementType={PopoverPlacementType.Bottom}\n            ref={componentRef}\n            open={pressed}\n            onAfterClose={handleClose}\n            onBeforeOpen={handleBeforeOpen}\n            onAfterOpen={handleAfterOpen}\n            hideArrow\n          >\n            <div className={classes.popoverContent} ref={overflowContentRef}>\n              {children.map((item, index) => {\n                if (index > lastVisibleIndex && index > numberOfAlwaysVisibleItems - 1) {\n                  // @ts-expect-error: if type is not defined, it's not a spacer\n                  if (item.type?.displayName === 'ToolbarSeparator') {\n                    return cloneElement(item as ReactElement, {\n                      style: {\n                        height: '0.0625rem',\n                        margin: '0.375rem 0.1875rem',\n                        width: '100%'\n                      }\n                    });\n                  }\n                  return item;\n                }\n                return null;\n              })}\n            </div>\n          </Popover>,\n          portalContainer ?? document.body\n        )}\n    </OverflowPopoverContext.Provider>\n  );\n};\n","import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport { CustomThemingParameters } from '../../themes/CustomVariables';\n\nexport const styles = {\n  outerContainer: {\n    boxSizing: 'border-box',\n    width: '100%',\n    maxWidth: '100%',\n    height: CssSizeVariables.sapWcrToolbarHeight,\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: `solid 0.0625rem ${ThemingParameters.sapGroup_TitleBorderColor}`\n  },\n  hasOverflow: {\n    '& $toolbar': {\n      maxWidth: 'calc(100% - 44px)'\n    }\n  },\n  clear: {\n    borderBottom: 'none'\n  },\n  active: {\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: ThemingParameters.sapList_Hover_Background\n    },\n    '&:focus': {\n      outline: CustomThemingParameters.ToolbarFocusOutline,\n      outlineOffset: '-0.1875rem',\n      boxShadow: CustomThemingParameters.ToolbarFocusShadow\n    },\n    '&:active': {\n      backgroundColor: ThemingParameters.sapActiveColor\n    }\n  },\n  info: {\n    height: '2rem', // always 2 rem both in Compact and Cozy\n    backgroundColor: ThemingParameters.sapInfobar_NonInteractive_Background,\n    color: ThemingParameters.sapList_TextColor,\n    '&$active': {\n      outlineColor: ThemingParameters.sapContent_ContrastFocusColor,\n      backgroundColor: ThemingParameters.sapInfobar_Background,\n      color: ThemingParameters.sapInfobar_TextColor,\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapInfobar_Hover_Background\n      },\n      '&:active': {\n        backgroundColor: ThemingParameters.sapInfobar_Active_Background\n      }\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapBackgroundColor\n  },\n  transparent: {\n    backgroundColor: ThemingParameters.sapToolbar_Background\n  },\n  toolbar: {\n    width: '100%',\n    '& >:first-child:not(.spacer)': {\n      marginInline: '0.5rem 0.25rem'\n    },\n    '& >:last-child:not(.spacer)': {\n      marginInline: '0.25rem 0.5rem'\n    },\n    '& > *:not(first-child):not(last-child):not(.spacer)': {\n      marginInline: '0.25rem'\n    },\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '100%'\n  },\n  overflowButtonContainer: {\n    display: 'flex',\n    marginInline: '0 0.5rem'\n  },\n  popover: {\n    '&[ui5-popover]::part(content)': {\n      padding: 0\n    }\n  },\n  popoverPhone: {\n    width: 'calc(100% - 10px)',\n    maxWidth: 'calc(100% - 10px)',\n    left: '5px !important'\n  },\n  popoverContent: {\n    padding: CssSizeVariables.sapWcrToolbarPopoverContentPadding,\n    display: 'flex',\n    flexDirection: 'column',\n    '& [ui5-toggle-button], & [ui5-button]': {\n      marginBottom: '0.25rem'\n    },\n    '& [ui5-button]::part(button) ,& [ui5-toggle-button]::part(button)': {\n      justifyContent: 'start'\n    },\n    '& [ui5-button][icon-only]::part(button), & [ui5-toggle-button][icon-only]::part(button)': {\n      padding: 'revert'\n    },\n    '& :last-child': {\n      marginBottom: 0\n    }\n  },\n  childContainer: { display: 'flex' }\n};\n","'use client';\n\nimport {\n  debounce,\n  useI18nBundle,\n  useIsomorphicLayoutEffect,\n  useIsRTL,\n  useSyncRef\n} from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, {\n  Children,\n  cloneElement,\n  createRef,\n  ElementType,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  Ref,\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { ToolbarDesign, ToolbarStyle } from '../../enums';\nimport { SHOW_MORE } from '../../i18n/i18n-defaults';\nimport { CommonProps } from '../../interfaces';\nimport { flattenFragments } from '../../internal/utils';\nimport { ButtonPropTypes, PopoverDomRef, ToggleButtonPropTypes } from '../../webComponents';\nimport { OverflowPopover } from './OverflowPopover';\nimport { styles } from './Toolbar.jss';\n\nconst useStyles = createUseStyles(styles, { name: 'Toolbar' });\n\nexport interface ToolbarPropTypes extends Omit<CommonProps, 'onClick' | 'children'> {\n  /**\n   * Defines the content of the `Toolbar`.\n   *\n   * __Note:__ Although this prop accepts all `ReactNode` types, it is strongly recommended to not pass `string` or `number` to it.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the button shown when the `Toolbar` goes into overflow.\n   *\n   * __Note:__ It is strongly recommended that you only use `ToggleButton` in icon only mode in order to preserve the intended design.\n   *\n   * __Note:__ Per default a `ToggleButton` with the `\"overflow\"` icon and all necessary a11y attributes will be rendered.\n   */\n  overflowButton?: ReactElement<ToggleButtonPropTypes> | ReactElement<ButtonPropTypes>;\n  /**\n   * Defines the visual style of the `Toolbar`.\n   *\n   * __Note:__ The visual styles are theme-dependent.\n   */\n  toolbarStyle?: ToolbarStyle | keyof typeof ToolbarStyle;\n  /**\n   * Defines the `Toolbar` design.<br />\n   * <b>Note:</b> Design settings are theme-dependent.\n   */\n  design?: ToolbarDesign | keyof typeof ToolbarDesign;\n  /**\n   * Indicates that the whole `Toolbar` is clickable. The Press event is fired only if `active` is set to true.\n   */\n  active?: boolean;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n  /**\n   * Defines where modals are rendered into via `React.createPortal`.\n   *\n   * You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-working-with-portals--page).\n   *\n   * Defaults to: `document.body`\n   */\n  portalContainer?: Element;\n  /**\n   * Defines the number of items inside the toolbar which should always be visible.\n   * _E.g.: `numberOfAlwaysVisibleItems={3}` would always show the first three items, no matter the size of the toolbar._\n   *\n   * __Note__: To preserve the intended design, it's not recommended to overwrite the `min-width` when using this prop.\n   */\n  numberOfAlwaysVisibleItems?: number;\n  /**\n   * Exposes the React Ref of the overflow popover.\n   * This can be useful, for example, when wanting to close the popover on click or selection of a child element.\n   */\n  overflowPopoverRef?: Ref<PopoverDomRef>;\n  /**\n   * Fired if the `active` prop is set to true and the user clicks or presses Enter/Space on the `Toolbar`.\n   */\n  onClick?: (event: CustomEvent) => void;\n  /**\n   * Fired when the content of the overflow popover has changed.\n   */\n  onOverflowChange?: (event: {\n    toolbarElements: HTMLElement[];\n    overflowElements: HTMLCollection;\n    target: HTMLElement;\n  }) => void;\n}\n\nconst OVERFLOW_BUTTON_WIDTH = 36 + 8 + 8; // width + padding end + spacing start\n\n/**\n * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.\n *\n * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.\n * It can be accessed by the user through the overflow button that opens it in a popover.\n *\n * __Note:__ The overflow popover is mounted only when opened, i.e., any child component of the popover will be remounted, when moved into it.\n */\nconst Toolbar = forwardRef<HTMLDivElement, ToolbarPropTypes>((props, ref) => {\n  const {\n    children,\n    toolbarStyle = ToolbarStyle.Standard,\n    design = ToolbarDesign.Auto,\n    active = false,\n    style,\n    className,\n    onClick,\n    slot,\n    as = 'div',\n    portalContainer,\n    numberOfAlwaysVisibleItems = 0,\n    onOverflowChange,\n    overflowPopoverRef,\n    overflowButton,\n    ...rest\n  } = props;\n\n  const classes = useStyles();\n  const [componentRef, outerContainer] = useSyncRef<HTMLDivElement>(ref);\n  const controlMetaData = useRef([]);\n  const [lastVisibleIndex, setLastVisibleIndex] = useState<number>(null);\n  const contentRef = useRef(null);\n  const overflowContentRef = useRef(null);\n  const overflowBtnRef = useRef(null);\n  const [minWidth, setMinWidth] = useState('0');\n  const isRtl = useIsRTL(outerContainer);\n\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const showMoreText = i18nBundle.getText(SHOW_MORE);\n\n  const toolbarClasses = clsx(\n    classes.outerContainer,\n    toolbarStyle === ToolbarStyle.Clear && classes.clear,\n    active && classes.active,\n    design === ToolbarDesign.Solid && classes.solid,\n    design === ToolbarDesign.Transparent && classes.transparent,\n    design === ToolbarDesign.Info && classes.info,\n    className\n  );\n  const flatChildren = useMemo(() => {\n    return flattenFragments(children, 10);\n  }, [children]);\n\n  const childrenWithRef = useMemo(() => {\n    controlMetaData.current = [];\n\n    return flatChildren.map((item, index) => {\n      const itemRef: RefObject<HTMLDivElement> = createRef();\n      // @ts-expect-error: if type is not defined, it's not a spacer\n      const isSpacer = item?.type?.displayName === 'ToolbarSpacer';\n      controlMetaData.current.push({\n        ref: itemRef,\n        isSpacer\n      });\n      if (isSpacer) {\n        return item;\n      }\n      return (\n        <div ref={itemRef} key={index} className={classes.childContainer} data-component-name=\"ToolbarChildContainer\">\n          {item}\n        </div>\n      );\n    });\n  }, [flatChildren, controlMetaData, classes.childContainer]);\n\n  const overflowNeeded =\n    (lastVisibleIndex || lastVisibleIndex === 0) &&\n    Children.count(childrenWithRef) !== lastVisibleIndex + 1 &&\n    numberOfAlwaysVisibleItems < Children.count(flatChildren);\n\n  useEffect(() => {\n    let lastElementResizeObserver;\n    const lastElement = contentRef.current.children[numberOfAlwaysVisibleItems - 1];\n    const debouncedObserverFn = debounce(() => {\n      if (isRtl) {\n        setMinWidth(`${lastElement.offsetParent.offsetWidth - lastElement.offsetLeft + OVERFLOW_BUTTON_WIDTH}px`);\n      } else {\n        setMinWidth(`${lastElement.offsetLeft + lastElement.getBoundingClientRect().width + OVERFLOW_BUTTON_WIDTH}px`);\n      }\n    }, 200);\n    if (numberOfAlwaysVisibleItems && overflowNeeded && lastElement) {\n      lastElementResizeObserver = new ResizeObserver(debouncedObserverFn);\n      lastElementResizeObserver.observe(contentRef.current);\n    }\n    return () => {\n      debouncedObserverFn.cancel();\n      lastElementResizeObserver?.disconnect();\n    };\n  }, [numberOfAlwaysVisibleItems, overflowNeeded, isRtl]);\n\n  const requestAnimationFrameRef = useRef<undefined | number>();\n  const calculateVisibleItems = useCallback(() => {\n    requestAnimationFrameRef.current = requestAnimationFrame(() => {\n      if (!outerContainer.current) return;\n      const availableWidth = outerContainer.current.getBoundingClientRect().width;\n      let consumedWidth = 0;\n      let lastIndex = null;\n      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {\n        lastIndex = -1;\n      } else {\n        let prevItemsAreSpacer = true;\n        controlMetaData.current.forEach((item, index) => {\n          const currentMeta = controlMetaData.current[index] as { ref: RefObject<HTMLElement> };\n          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {\n            let nextWidth = currentMeta.ref.current.getBoundingClientRect().width;\n            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px\n            if (index === controlMetaData.current.length - 1) {\n              if (consumedWidth + nextWidth <= availableWidth - 8) {\n                lastIndex = index;\n              } else if (index === 0 || prevItemsAreSpacer) {\n                lastIndex = index - 1;\n              }\n            } else {\n              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index;\n              }\n              if (\n                consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH &&\n                consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH\n              ) {\n                lastIndex = index - 1;\n              }\n            }\n            if (prevItemsAreSpacer && !item.isSpacer) {\n              prevItemsAreSpacer = false;\n            }\n            consumedWidth += nextWidth;\n          }\n        });\n      }\n      setLastVisibleIndex(lastIndex);\n    });\n  }, [overflowNeeded]);\n\n  useEffect(() => {\n    const observer = new ResizeObserver(calculateVisibleItems);\n\n    if (outerContainer.current) {\n      observer.observe(outerContainer.current);\n    }\n    return () => {\n      cancelAnimationFrame(requestAnimationFrameRef.current);\n      observer.disconnect();\n    };\n  }, [calculateVisibleItems]);\n\n  useEffect(() => {\n    if (Children.count(children) > 0) {\n      calculateVisibleItems();\n    }\n  }, [children]);\n\n  useIsomorphicLayoutEffect(() => {\n    calculateVisibleItems();\n  }, [calculateVisibleItems]);\n\n  const handleToolbarClick = (e) => {\n    if (active && typeof onClick === 'function') {\n      const isSpaceEnterDown = e.type === 'keydown' && (e.code === 'Enter' || e.code === 'Space');\n      if (isSpaceEnterDown && e.target !== e.currentTarget) {\n        return;\n      }\n      if (e.type === 'click' || isSpaceEnterDown) {\n        e.preventDefault();\n        onClick(e);\n      }\n    }\n  };\n\n  const prevChildren = useRef(flatChildren);\n  const debouncedOverflowChange = useRef(debounce(onOverflowChange, 60));\n\n  useEffect(() => {\n    debouncedOverflowChange.current = debounce(onOverflowChange, 60);\n  }, [onOverflowChange]);\n\n  useEffect(() => {\n    const haveChildrenChanged = prevChildren.current.length !== flatChildren.length;\n    if ((lastVisibleIndex !== null || haveChildrenChanged) && typeof onOverflowChange === 'function') {\n      prevChildren.current = flatChildren;\n      const toolbarChildren = contentRef.current?.children;\n      let toolbarElements = [];\n      const overflowElements = overflowContentRef.current?.children;\n      if (toolbarChildren?.length > 0) {\n        toolbarElements = Array.from(toolbarChildren).filter((item, index) => index <= lastVisibleIndex);\n      }\n      debouncedOverflowChange.current({\n        toolbarElements,\n        overflowElements,\n        target: outerContainer.current\n      });\n    }\n    return () => {\n      debouncedOverflowChange.current.cancel();\n    };\n  }, [lastVisibleIndex, flatChildren, debouncedOverflowChange]);\n\n  const CustomTag = as as ElementType;\n  const styleWithMinWidth = minWidth !== '0' ? { minWidth, ...style } : style;\n  return (\n    <CustomTag\n      style={styleWithMinWidth}\n      className={clsx(toolbarClasses, overflowNeeded && classes.hasOverflow)}\n      ref={componentRef}\n      slot={slot}\n      onClick={handleToolbarClick}\n      onKeyDown={handleToolbarClick}\n      tabIndex={active ? 0 : undefined}\n      role={active ? 'button' : undefined}\n      data-sap-ui-fastnavgroup=\"true\"\n      {...rest}\n    >\n      <div className={classes.toolbar} data-component-name=\"ToolbarContent\" ref={contentRef}>\n        {overflowNeeded &&\n          Children.map(childrenWithRef, (item, index) => {\n            if (index >= lastVisibleIndex + 1 && index > numberOfAlwaysVisibleItems - 1) {\n              return cloneElement(item as ReactElement, {\n                style: { visibility: 'hidden', position: 'absolute', pointerEvents: 'none' }\n              });\n            }\n            return item;\n          })}\n        {!overflowNeeded && childrenWithRef}\n      </div>\n      {overflowNeeded && (\n        <div\n          ref={overflowBtnRef}\n          className={classes.overflowButtonContainer}\n          data-component-name=\"ToolbarOverflowButtonContainer\"\n        >\n          <OverflowPopover\n            overflowPopoverRef={overflowPopoverRef}\n            lastVisibleIndex={lastVisibleIndex}\n            classes={classes}\n            portalContainer={portalContainer}\n            overflowContentRef={overflowContentRef}\n            numberOfAlwaysVisibleItems={numberOfAlwaysVisibleItems}\n            showMoreText={showMoreText}\n            overflowButton={overflowButton}\n          >\n            {flatChildren}\n          </OverflowPopover>\n        </div>\n      )}\n    </CustomTag>\n  );\n});\n\nToolbar.displayName = 'Toolbar';\nexport { Toolbar };\n"],"names":["ToolbarDesign","ToolbarStyle","OverflowPopoverContext","createContext","isPhone","Device.isPhone","OverflowPopover","props","lastVisibleIndex","classes","children","portalContainer","overflowContentRef","numberOfAlwaysVisibleItems","showMoreText","overflowPopoverRef","overflowButton","pressed","setPressed","useState","toggleBtnRef","useRef","componentRef","popoverRef","useSyncRef","handleToggleButtonClick","e","prev","handleBeforeOpen","handleAfterOpen","handleClose","stopPropagation","useEffect","tagName","getUi5TagWithSuffix","clonedOverflowButtonClick","_a","canRenderPortal","useCanRenderPortal","jsxs","cloneElement","jsx","ToggleButton","ButtonDesign","iconOverflow","createPortal","Popover","clsx","PopoverPlacementType","item","index","styles","CssSizeVariables","ThemingParameters","CustomThemingParameters","useStyles","createUseStyles","OVERFLOW_BUTTON_WIDTH","Toolbar","forwardRef","ref","toolbarStyle","design","active","style","className","onClick","slot","as","onOverflowChange","rest","outerContainer","controlMetaData","setLastVisibleIndex","contentRef","overflowBtnRef","minWidth","setMinWidth","isRtl","useIsRTL","useI18nBundle","SHOW_MORE","toolbarClasses","flatChildren","useMemo","flattenFragments","childrenWithRef","itemRef","createRef","isSpacer","overflowNeeded","Children","lastElementResizeObserver","lastElement","debouncedObserverFn","debounce","requestAnimationFrameRef","calculateVisibleItems","useCallback","availableWidth","consumedWidth","lastIndex","prevItemsAreSpacer","currentMeta","nextWidth","observer","useIsomorphicLayoutEffect","handleToolbarClick","isSpaceEnterDown","prevChildren","debouncedOverflowChange","haveChildrenChanged","toolbarChildren","toolbarElements","overflowElements","_b","CustomTag","styleWithMinWidth"],"mappings":"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"}